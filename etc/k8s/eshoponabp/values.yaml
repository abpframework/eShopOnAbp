# auth-server sub-chart override
keycloak:
  config:
    dbVendor: postgres
    dbAddr: eshop-st-postgresdb
    dbDatabase: keycloak
    dbUser: postgres
    dbPassword: myPassw0rd
    keycloakAdmin: admin
    keycloakAdminPassword: 1q2w3E*
    kcHealthEnabled: true
  ingress:
    host: eshop-st-keycloak
    tlsSecret: eshop-wildcard-tls
  image:
    repository: quay.io/keycloak/keycloak
    tag: 19.0.2
    pullPolicy: IfNotPresent

# web sub-chart override
web:
  config:
    selfUrl: https://eshop-st-web
    gatewayUrl: https://eshop-st-gateway-web
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: false
      responseType: "code"
      strictDiscoveryDocumentValidation: false
      skipIssuerCheck: true
  ingress:
    host: eshop-st-web
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/app-web"
    tag: 1.0.0

# public-web sub-chart override
public-web:
  config:
    selfUrl: https://eshop-st-public-web
    gatewayUrl: http://eshop-st-gateway-web-public/
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      isOnProd: "false"
      metaAddress: http://eshop-st-keycloak
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  ingress:
    host: eshop-st-public-web
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/app-publicweb"
    tag: 1.0.0

# identity-service sub-chart override
identity:
  config:
    selfUrl: https://eshop-st-identity
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public
    connectionStrings:
      identityService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Identity;User ID=postgres;password=myPassw0rd;Pooling=false"
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch    
  identityServerClients: # Seeded Clients
    webRootUrl: https://eshop-st-web/  
    publicWebRootUrl: https://eshop-st-public-web/
    webGatewayRootUrl: https://eshop-st-gateway-web/
    publicWebGatewayRootUrl: https://eshop-st-gateway-web-public/
    identityServiceRootUrl: https://eshop-st-identity/
    administrationServiceRootUrl: https://eshop-st-administration/
    accountServiceRootUrl: https://eshop-st-keycloak/
    basketServiceRootUrl: https://eshop-st-basket/
    catalogServiceRootUrl: https://eshop-st-catalog/
    orderingServiceRootUrl: https://eshop-st-ordering/
    cmskitServiceRootUrl: https://eshop-st-cmskit/
    paymentServiceRootUrl: https://eshop-st-payment/
  ingress:
    host: eshop-st-identity
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-identity"
    tag: 1.0.0

# administration sub-chart override
administration:
  config:
    selfUrl: https://eshop-st-administration
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public
    connectionStrings:
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    remoteServices:
      abpIdentityBaseUrl: https://eshop-st-identity
      useCurrentToken: "false"  
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  synchedCommunication: # Used for server-to-server (client-credentials) communication with identityService for user permissions
    authority: https://eshop-st-keycloak
  ingress:
    host: eshop-st-administration
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-administration"
    tag: 1.0.0

# gateway-web sub-chart override
gateway-web:
  config:
    selfUrl: https://eshop-st-gateway-web
    corsOrigins: https://eshop-st-web
    globalConfigurationBaseUrl: http://eshop-st-gateway-public
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  ingress:
    host: eshop-st-gateway-web
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/gateway-web"
    tag: 1.0.0
  reRoutes:
    accountService:
      url: http://eshop-st-keycloak
    identityService:
      url: http://eshop-st-identity
    administrationService:
      url: http://eshop-st-administration
    catalogService:
      url: http://eshop-st-catalog
    orderingService:
      url: http://eshop-st-ordering
    cmskitService:
      url: http://eshop-st-cmskit

# gateway-web-public sub-chart override
gateway-web-public:
  config:
    selfUrl: https://eshop-st-gateway-web-public
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  ingress:
    host: eshop-st-gateway-web-public
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/gateway-web-public"
    tag: 1.0.0
  reRoutes:
    accountService:
      url: http://eshop-st-keycloak
    identityService:
      url: http://eshop-st-identity
    administrationService:
      url: http://eshop-st-administration
    catalogService:
      url: http://eshop-st-catalog
    basketService:
      url: http://eshop-st-basket
    orderingService:
      url: http://eshop-st-ordering
    cmskitService:
      url: http://eshop-st-cmskit
    paymentService:
      url: http://eshop-st-payment  

# basket-service sub-chart override
basket:
  config:
    selfUrl: https://eshop-st-basket
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public,https://eshop-st-public-web
    connectionStrings:
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
    remoteServices:
      catalogBaseUrl: http://eshop-st-catalog:80
      catalogGrpcUrl: http://eshop-st-catalog:81
  ingress:
    host: eshop-st-basket
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-basket"
    tag: 1.0.0

# catalog-service sub-chart override
catalog:
  config:
    selfUrl: https://eshop-st-catalog
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public,https://eshop-st-public-web,https://eshop-st-web
    connectionStrings:
      catalogService: "mongodb://eshop-st-mongodb/EShopOnAbp_Catalog"
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
    kestrel:
      httpUrl: http://eshop-st-catalog:80
      httpProtocols: Http1AndHttp2
      grpcUrl: http://eshop-st-catalog:81
      grpcProtocols: Http2
  ingress:
    host: eshop-st-catalog
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-catalog"
    tag: 1.0.0

# ordering-service sub-chart override
ordering:
  config:
    selfUrl: https://eshop-st-ordering
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public
    connectionStrings:
      orderingService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Ordering;User ID=postgres;password=myPassw0rd;Pooling=false"
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  ingress:
    host: eshop-st-ordering
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-ordering"
    tag: 1.0.0

# cmskit-service sub-chart override
cmskit:
  config:
    selfUrl: https://eshop-st-cmskit
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public
    connectionStrings:
      cmskitService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Cmskit;User ID=postgres;password=myPassw0rd;Pooling=false"
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    remoteServices:
      abpIdentityBaseUrl: https://eshop-st-identity
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  synchedCommunication: # Used for server-to-server (client-credentials) communication with identityService for user permissions
    authority: https://eshop-st-keycloak
  ingress:
    host: eshop-st-cmskit
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "ghcr.io/volosoft/eshoponabp/service-cmskit"
    tag: 1.0.1

# payment-service sub-chart override
payment:
  config:
    selfUrl: https://eshop-st-payment
    corsOrigins: https://eshop-st-gateway-web,https://eshop-st-gateway-web-public
    connectionStrings:
      paymentService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Payment;User ID=postgres;password=myPassw0rd;Pooling=false"
      administrationService: "Host=eshop-st-postgresdb;Port=5432;Database=EShopOnAbp_Administration;User ID=postgres;password=myPassw0rd;Pooling=false"
    authServer:
      authority: http://eshop-st-keycloak
      requireHttpsMetadata: "false"
      swaggerClientId: WebGateway_Swagger
      swaggerClientSecret: "1q2w3e*"
    dotnetEnv: Staging
    redisHost: eshop-st-redis
    rabbitmqHost: eshop-st-rabbitmq
    elasticsearchHost: eshop-st-elasticsearch
  ingress:
    host: eshop-st-payment
    tlsSecret: eshop-wildcard-tls
  image:
    repository: "eshoponabp/service-payment"
    tag: 1.0.0

# Default values for eshoponabp.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}